trigger:
  branches:
    include:
      - dev
  paths:
    include:
      - service-discovery/**
      - cloud-config/**
      - api-gateway/**
      - proxy-client/**
      - order-service/**
      - product-service/**
      - user-service/**
      - shipping-service/**
      - payment-service/**
      - favourite-service/**
      - nginx/**

variables:
  - group: variable-group-taller
  - name: tag
    value: dev
  - name: aksResourceGroup
    value: 'dev-resource-group'
  - name: aksClusterName
    value: 'dev-aks-cluster'
  - name: kubernetesNamespace
    value: 'ecommerce'
  - name: dockerHubUsername
    value: 'salazq'

stages:

- stage: Tests
  displayName: 'Run Tests and Coverage for All Services'
  jobs:
    - job: RunAllTests
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self
        - task: Maven@4
          displayName: 'Run Tests and Generate Coverage'
          inputs:
            mavenPomFile: 'pom.xml'
            goals: 'clean verify'
            options: '-Dmaven.test.failure.ignore=false -Dspring.profiles.active=test'
            publishJUnitTestResults: true
            testResultsFiles: '**/target/surefire-reports/TEST-*.xml,**/target/failsafe-reports/TEST-*.xml'
            javaHomeOption: 'JDKVersion'
            jdkVersionOption: '1.11'
            mavenVersionOption: 'Default'
            mavenAuthenticateFeed: false
            effectivePomSkip: false 
        
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '**/target/surefire-reports/TEST-*.xml'
          
        - task: PublishCodeCoverageResults@2
          inputs:
            summaryFileLocation: 'jacoco-report-aggregation/target/site/jacoco-aggregate/jacoco.xml'
            pathToSources: 'jacoco-report-aggregation/target/site/jacoco-aggregate'

        - task: Docker@2
          displayName: Build and Push cloud-config
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/cloud-config'
            command: 'buildAndPush'
            Dockerfile: 'cloud-config/Dockerfile'
            buildContext: 'cloud-config/'
            tags: '$(tag)'

        # service-discovery
        - task: Docker@2
          displayName: Build and Push service-discovery
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/service-discovery'
            command: 'buildAndPush'
            Dockerfile: 'service-discovery/Dockerfile'
            buildContext: 'service-discovery/'
            tags: '$(tag)'

        # api-gateway
        - task: Docker@2
          displayName: Build and Push api-gateway
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/api-gateway'
            command: 'buildAndPush'
            Dockerfile: 'api-gateway/Dockerfile'
            buildContext: 'api-gateway/'
            tags: '$(tag)'

        # proxy-client
        - task: Docker@2
          displayName: Build and Push proxy-client
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/proxy-client'
            command: 'buildAndPush'
            Dockerfile: 'proxy-client/Dockerfile'
            buildContext: 'proxy-client/'
            tags: '$(tag)'

        # order-service
        - task: Docker@2
          displayName: Build and Push order-service
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/order-service'
            command: 'buildAndPush'
            Dockerfile: 'order-service/Dockerfile'
            buildContext: 'order-service/'
            tags: '$(tag)'

        # product-service
        - task: Docker@2
          displayName: Build and Push product-service
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/product-service'
            command: 'buildAndPush'
            Dockerfile: 'product-service/Dockerfile'
            buildContext: 'product-service/'
            tags: '$(tag)'

        # user-service
        - task: Docker@2
          displayName: Build and Push user-service
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/user-service'
            command: 'buildAndPush'
            Dockerfile: 'user-service/Dockerfile'
            buildContext: 'user-service/'
            tags: '$(tag)'

        # shipping-service
        - task: Docker@2
          displayName: Build and Push shipping-service
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/shipping-service'
            command: 'buildAndPush'
            Dockerfile: 'shipping-service/Dockerfile'
            buildContext: 'shipping-service/'
            tags: '$(tag)'

        # payment-service
        - task: Docker@2
          displayName: Build and Push payment-service
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/payment-service'
            command: 'buildAndPush'
            Dockerfile: 'payment-service/Dockerfile'
            buildContext: 'payment-service/'
            tags: '$(tag)'

        # favourite-service
        - task: Docker@2
          displayName: Build and Push favourite-service
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/favourite-service'
            command: 'buildAndPush'
            Dockerfile: 'favourite-service/Dockerfile'
            buildContext: 'favourite-service/'
            tags: '$(tag)'

        # nginx (as reverse proxy or static content)
        - task: Docker@2
          displayName: Build and Push nginx
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/nginx'
            command: 'buildAndPush'
            Dockerfile: 'nginx/Dockerfile'
            buildContext: 'nginx/'
            tags: '$(tag)'


- stage: NotifyFailure
  displayName: "Notificar Fallo en Teams"
  dependsOn:
    - Tests
  condition: failed()
  jobs:
    - job: NotifyJob
      steps:
        - task: PowerShell@2
          displayName: 'Enviar mensaje a Teams'
          inputs:
            targetType: 'inline'
            script: |
              Invoke-WebRequest -Uri "https://prod-56.westus.logic.azure.com:443/workflows/e6a26998771d4739b79204f1ddd54491/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=AMTXYf0tRkscjsz60bI226Tob4riU3XEfXa1ZLNjeiY" `
                -Method POST `
                -Headers @{ "Content-Type" = "application/json" } `
                -Body '{
                  "attachments": [{
                    "contentType": "application/vnd.microsoft.teams.card.adaptive",
                    "content": {
                      "type": "AdaptiveCard",
                      "version": "1.0",
                      "body": [
                        { "type": "TextBlock", "text": "üö® *Pipeline Fallida*", "weight": "Bolder", "size": "Medium", "color": "Attention" },
                        { "type": "TextBlock", "text": "üîß Proyecto: ecommerce-microservice-backend-app" },
                        { "type": "TextBlock", "text": "üß™ Estado: Fallido" },
                        { "type": "TextBlock", "text": "üåø Rama: $(Build.DefinitionName)" },
                        { "type": "TextBlock", "text": "üë§ Ejecutado por: $(Build.RequestedFor)" },
                        {
                          "type": "TextBlock",
                          "text": "[üîç Ver logs](https://dev.azure.com/salazq/ecommerce-microservice-backend-app/_build/results?buildId=$(Build.BuildId))",
                          "wrap": true
                        }
                      ]
                    }
                  }]
                }'

