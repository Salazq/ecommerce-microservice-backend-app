trigger: none

variables:
  - group: variable-group-taller
  - name: environmentPath
    value: 'terraform/environments/$(environment)'
  - name: aksResourceGroup
    value: 'dev-resource-group'
  - name: aksClusterName
    value: 'dev-aks-cluster'
  - name: kubernetesNamespace
    value: 'ecommerce'
  - name: nginxServiceName
    value: 'nginx-proxy'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: GetNginxIP
  displayName: 'Obtener IP pública de nginx-proxy'
  jobs:
    - job: CaptureNginxIP
      displayName: 'Capturar IP del servicio nginx'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
          
        - task: AzureCLI@2
          displayName: 'Login to Azure y obtener credenciales del clúster'
          inputs:
            azureSubscription: '$(AZURE_ACCOUNT)'
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing

        - script: |
            echo "Esperando IP pública del servicio nginx..."
            for i in {1..10}; do
              IP=$(kubectl get svc $(nginxServiceName) -n $(kubernetesNamespace) -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
              if [[ -n "$IP" ]]; then
                echo "IP pública obtenida: $IP"
                echo "##vso[task.setvariable variable=NGINX_PUBLIC_IP;isOutput=true]$IP"
                break
              else
                echo "IP aún no disponible, reintentando en 10 segundos..."
                sleep 10
              fi
            done
          displayName: 'Capturar IP pública del nginx'
          name: CaptureIP

- stage: DisplayNginxIP
  displayName: 'Mostrar IP pública capturada'
  dependsOn: GetNginxIP
  variables:
    - name: capturedIP
      value: $[ stageDependencies.GetNginxIP.CaptureNginxIP.outputs['CaptureIP.NGINX_PUBLIC_IP'] ]
  jobs:
    - job: ShowIP
      displayName: 'Imprimir IP del nginx'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - script: |
            echo "==============================================="
            echo "PIPELINE COMPLETADO EXITOSAMENTE"
            echo "==============================================="
            echo "IP PÚBLICA DEL SERVICIO NGINX:"
            echo "$(capturedIP)"
            echo "==============================================="
            echo "URL del servicio: http://$(capturedIP)"
            echo "HTTPS URL: https://$(capturedIP)"
            echo "==============================================="
            echo "Información del despliegue:"
            echo "- Imagen desplegada: $(containerRegistry)/$(imageRepository):$(tag)"
            echo "- Namespace: $(kubernetesNamespace)"
            echo "- Servicio: $(nginxServiceName)"
            echo "- Cluster AKS: $(aksClusterName)"
            echo "- Resource Group: $(aksResourceGroup)"
            echo "==============================================="
          displayName: 'Mostrar información completa del despliegue'
          
        - script: |
            if [[ -z "$(capturedIP)" ]]; then
              echo "##vso[task.logissue type=error]No se pudo obtener la IP pública del servicio nginx"
              echo "Verificando estado del servicio..."
              kubectl get svc $(nginxServiceName) -n $(kubernetesNamespace) || echo "Servicio no encontrado"
              exit 1
            else
              echo "##vso[task.complete result=Succeeded;]✅ Pipeline completado - IP capturada exitosamente: $(capturedIP)"
              echo "##vso[task.setvariable variable=FINAL_NGINX_IP;isOutput=true]$(capturedIP)"
            fi
          displayName: 'Validar y finalizar pipeline'
          name: FinalValidation

