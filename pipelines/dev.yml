trigger: none

variables:
  - group: variable-group-taller
  - name: environmentPath
  # AKS Cluster details
  - name: aksResourceGroup
    value: 'dev-resource-group'
  - name: aksClusterName
    value: 'dev-aks-cluster'
  - name: kubernetesNamespace
    value: 'ecommerce'
  - name: zapInstallDir
    value: '$(Agent.ToolsDirectory)/zap'
  - name: nginxServiceName
    value: 'nginx-proxy'

stages:
- stage: sonarqube
  displayName: sonarqube
  jobs:
    - job: sonarqube
      steps:
        - task: SonarCloudPrepare@3
          inputs:
            SonarQube: 'SonarCloud'
            organization: 'ecommerce-microservice-backend'
            scannerMode: 'other'
            extraProperties: |
              # Additional properties that will be passed to the scanner,
              # Put one key=value per line, example:
              # sonar.exclusions=**/*.bin
              sonar.projectKey=salazq_ecommerce-microservice-backend-app
              sonar.projectName=ecommerce-microservice-backend-app
        - task: Maven@4
          inputs:
            azureSubscription: 'Azure for Students(bfc3d097-7e73-40b8-aa34-e70b307c0867)'
            mavenPomFile: 'pom.xml'
            options: '-DskipTests'
            publishJUnitResults: false
            javaHomeOption: 'JDKVersion'
            mavenVersionOption: 'Default'
            mavenAuthenticateFeed: false
            effectivePomSkip: false
            sonarQubeRunAnalysis: true
            sqMavenPluginVersionChoice: 'latest'
- stage: Deploy
  displayName: 'Deploy to AKS'
  jobs:
  - deployment: DeployToAKS
    displayName: 'Deploy Microservices to AKS'
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: AzureCLI@2
            displayName: 'Get AKS credentials'
            inputs:
              azureSubscription: $(AZURE_ACCOUNT)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing
          - task: Kubernetes@1
            displayName: 'Create Namespace'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/namespace.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy Zipkin'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/zipkin.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy Cloud Config Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/cloud-config.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Service Discovery'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/service-discovery.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy API Gateway'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/api-gateway.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy User Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/user-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Product Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/product-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Order Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/order-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Payment Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/payment-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Favourite Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/favourite-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Shipping Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/shipping-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Proxy Client'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/proxy-client.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Nginx'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/nginx.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Verify Deployment Status'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'get'
              arguments: 'pods -n $(kubernetesNamespace)'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Get Services Status'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'get'
              arguments: 'services -n $(kubernetesNamespace)'
              workingDirectory: '$(System.DefaultWorkingDirectory)'