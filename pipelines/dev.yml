trigger:
  none

variables:
  # AKS Cluster details
  aksResourceGroup: 'dev-resource-group' # Replace with your resource group name
  aksClusterName: 'dev-aks-cluster' # Replace with your AKS cluster name
  # Kubernetes namespace
  kubernetesNamespace: 'ecommerce'
  zapInstallDir: '$(Agent.ToolsDirectory)/zap' # Define a directory for ZAP installation

stages:
- stage: InstallOwaspZap
  displayName: 'Install OWASP ZAP'
  jobs:
  - job: InstallZap
    displayName: 'Install ZAP'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - script: |
          echo "Downloading OWASP ZAP..."
          wget -q https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2.14.0_Linux.tar.gz -P /tmp
          echo "Installing OWASP ZAP..."
          mkdir -p $(zapInstallDir)
          tar -xzf /tmp/ZAP_2.14.0_Linux.tar.gz -C $(zapInstallDir) --strip-components=1
          echo "OWASP ZAP installed in $(zapInstallDir)"
          echo "##vso[task.setvariable variable=zapInstallDir;isOutput=true]$(zapInstallDir)"
        name: ZapInstallation
        displayName: 'Download and Install OWASP ZAP'

- stage: Deploy
  displayName: 'Deploy to AKS'
  jobs:
  - deployment: DeployToAKS
    displayName: 'Deploy Microservices to AKS'
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: AzureCLI@2
            displayName: 'Get AKS credentials'
            inputs:
              azureSubscription: $(AZURE_ACCOUNT)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing
          - task: Kubernetes@1
            displayName: 'Create Namespace'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/namespace.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy Zipkin'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/zipkin.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy Cloud Config Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/cloud-config.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Service Discovery'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/service-discovery.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy API Gateway'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/api-gateway.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy User Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/user-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Product Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/product-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Order Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/order-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Payment Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/payment-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Favourite Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/favourite-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Shipping Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/shipping-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Proxy Client'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/proxy-client.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Nginx'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/nginx.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Verify Deployment Status'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'get'
              arguments: 'pods -n $(kubernetesNamespace)'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Get Services Status'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'get'
              arguments: 'services -n $(kubernetesNamespace)'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
- stage: GetNginxIP
  displayName: 'Obtener IP pública de nginx-proxy'
  jobs:
    - job: CaptureNginxIP
      displayName: 'Capturar IP del servicio nginx'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureCLI@2
          displayName: 'Login to Azure y obtener credenciales del clúster'
          inputs:
            azureSubscription: '$(AZURE_ACCOUNT)'
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing

        - script: |
            echo "Esperando IP pública del servicio nginx..."
            for i in {1..10}; do
              IP=$(kubectl get svc $(nginxServiceName) -n $(kubernetesNamespace) -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
              if [[ -n "$IP" ]]; then
                echo "IP pública obtenida: $IP"
                echo "##vso[task.setvariable variable=NGINX_PUBLIC_IP;isOutput=true]$IP"
                break
              else
                echo "IP aún no disponible, reintentando en 10 segundos..."
                sleep 10
              fi
            done
          displayName: 'Capturar IP pública del nginx'
          name: CaptureIP

- stage: SecurityScan
  displayName: 'Perform OWASP ZAP Security Scan'
  dependsOn:
    - GetNginxIP
  jobs:
    - job: ZapScan
      displayName: 'Run ZAP Scan on Nginx IP'
      pool:
        vmImage: 'ubuntu-latest'
      variables:
        nginxPublicIP: $[ stageDependencies.GetNginxIP.CaptureNginxIP.outputs['CaptureIP.NGINX_PUBLIC_IP'] ] # Accessing output variable
        zapInstallDir: $[ stageDependencies.InstallOwaspZap.InstallZap.outputs['ZapInstallation.zapInstallDir'] ]
      steps:
        - script: |
            echo "Starting OWASP ZAP baseline scan on http://$(nginxPublicIP)"
            cd $(zapInstallDir)
            ./zap.sh -cmd -quickurl http://$(nginxPublicIP) -quickprogress -baselinescan -config api.disablekey=true -config scanner.attackOnStart=true -config view.mode=attack -report $(Build.ArtifactStagingDirectory)/zap_report.html
            echo "ZAP Scan Complete. Report generated at $(Build.ArtifactStagingDirectory)/zap_report.html"
          displayName: 'Run OWASP ZAP Baseline Scan'

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'ZAPScanReport'
            publishLocation: 'Container'
          displayName: 'Publish ZAP Scan Report'
