trigger:
  branches:
    include:
      - master
  paths:
    include:
      - service-discovery/**
      - cloud-config/**
      - api-gateway/**
      - proxy-client/**
      - order-service/**
      - product-service/**
      - user-service/**
      - shipping-service/**
      - payment-service/**
      - favourite-service/**
      - nginx/**

variables:
  - group: variable-group-taller
  - name: tag
    value: prod
  - name: aksResourceGroup
    value: 'prod-resource-group'
  - name: aksClusterName
    value: 'prod-aks-cluster'
  - name: kubernetesNamespace
    value: 'ecommerce'
  - name: dockerHubUsername
    value: 'salazq'
  - name: vmImageName
    value: 'ubuntu-latest'
  - name: nginxServiceName
    value: 'nginx-proxy'

stages:

- stage: Tests
  displayName: 'Run Tests and Coverage for All Services'
  jobs:
    - job: RunAllTests
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self

        - task: SonarCloudPrepare@3
          inputs:
            SonarQube: 'SonarCloud'
            organization: 'ecommerce-microservice-backend'
            scannerMode: 'other'
            extraProperties: |
              # Additional properties that will be passed to the scanner,
              # Put one key=value per line, example:
              # sonar.exclusions=**/*.bin
              sonar.projectKey=salazq_ecommerce-microservice-backend-app
              sonar.projectName=ecommerce-microservice-backend-app
        - task: Maven@4
          displayName: 'Run Tests and Generate Coverage'
          inputs:
            azureSubscription: '$(AZURE_ACCOUNT)'
            mavenPomFile: 'pom.xml'
            goals: 'clean verify'
            options: '-Dmaven.test.failure.ignore=false -Dspring.profiles.active=test'
            publishJUnitTestResults: true
            testResultsFiles: '**/target/surefire-reports/TEST-*.xml,**/target/failsafe-reports/TEST-*.xml'
            javaHomeOption: 'JDKVersion'
            jdkVersionOption: '1.11'
            mavenVersionOption: 'Default'
            mavenAuthenticateFeed: false
            effectivePomSkip: false
            sonarQubeRunAnalysis: true
            sqMavenPluginVersionChoice: 'latest'
        
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '**/target/surefire-reports/TEST-*.xml'
          
        - task: PublishCodeCoverageResults@2
          inputs:
            summaryFileLocation: 'jacoco-report-aggregation/target/site/jacoco-aggregate/jacoco.xml'
            pathToSources: 'jacoco-report-aggregation/target/site/jacoco-aggregate'

        - task: Docker@2
          displayName: Build and Push cloud-config
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/cloud-config'
            command: 'buildAndPush'
            Dockerfile: 'cloud-config/Dockerfile'
            buildContext: 'cloud-config/'
            tags: '$(tag)'

        # service-discovery
        - task: Docker@2
          displayName: Build and Push service-discovery
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/service-discovery'
            command: 'buildAndPush'
            Dockerfile: 'service-discovery/Dockerfile'
            buildContext: 'service-discovery/'
            tags: '$(tag)'

        # api-gateway
        - task: Docker@2
          displayName: Build and Push api-gateway
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/api-gateway'
            command: 'buildAndPush'
            Dockerfile: 'api-gateway/Dockerfile'
            buildContext: 'api-gateway/'
            tags: '$(tag)'

        # proxy-client
        - task: Docker@2
          displayName: Build and Push proxy-client
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/proxy-client'
            command: 'buildAndPush'
            Dockerfile: 'proxy-client/Dockerfile'
            buildContext: 'proxy-client/'
            tags: '$(tag)'

        # order-service
        - task: Docker@2
          displayName: Build and Push order-service
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/order-service'
            command: 'buildAndPush'
            Dockerfile: 'order-service/Dockerfile'
            buildContext: 'order-service/'
            tags: '$(tag)'

        # product-service
        - task: Docker@2
          displayName: Build and Push product-service
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/product-service'
            command: 'buildAndPush'
            Dockerfile: 'product-service/Dockerfile'
            buildContext: 'product-service/'
            tags: '$(tag)'

        # user-service
        - task: Docker@2
          displayName: Build and Push user-service
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/user-service'
            command: 'buildAndPush'
            Dockerfile: 'user-service/Dockerfile'
            buildContext: 'user-service/'
            tags: '$(tag)'

        # shipping-service
        - task: Docker@2
          displayName: Build and Push shipping-service
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/shipping-service'
            command: 'buildAndPush'
            Dockerfile: 'shipping-service/Dockerfile'
            buildContext: 'shipping-service/'
            tags: '$(tag)'

        # payment-service
        - task: Docker@2
          displayName: Build and Push payment-service
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/payment-service'
            command: 'buildAndPush'
            Dockerfile: 'payment-service/Dockerfile'
            buildContext: 'payment-service/'
            tags: '$(tag)'

        # favourite-service
        - task: Docker@2
          displayName: Build and Push favourite-service
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/favourite-service'
            command: 'buildAndPush'
            Dockerfile: 'favourite-service/Dockerfile'
            buildContext: 'favourite-service/'
            tags: '$(tag)'

        # nginx (as reverse proxy or static content)
        - task: Docker@2
          displayName: Build and Push nginx
          inputs:
            containerRegistry: 'docker-hub-service'
            repository: 'salazq/nginx'
            command: 'buildAndPush'
            Dockerfile: 'nginx/Dockerfile'
            buildContext: 'nginx/'
            tags: '$(tag)'



- stage: ManualApproval
  displayName: 'Manual Approval for Deployment'
  dependsOn: Tests
  jobs:
  - job: waitForValidation
    displayName: Wait for external validation
    pool: server
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 1440 # task times out in 1 day
      inputs:
        instructions: 'Please validate the build configuration and semantic release. Check release notes and approve deployment.'
        onTimeout: 'resume'

- stage: CheckNamespace
  displayName: 'Check Namespace'
  dependsOn: ManualApproval
  jobs:
    - job: CheckNamespace
      displayName: 'Check if Namespace Exists'
      pool:
        vmImage: $(vmImageName)
      steps:
        - task: AzureCLI@2
          name: checkNamespace
          displayName: 'Check if Namespace Exists'
          inputs:
            azureSubscription: $(AZURE_ACCOUNT)
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing
              if kubectl get namespace $(kubernetesNamespace) 2>/dev/null; then
                echo "✅ Namespace $(kubernetesNamespace) existe"
                echo "##vso[task.setvariable variable=namespaceExists;isOutput=true]true"
              else
                echo "❌ Namespace $(kubernetesNamespace) no existe"
                echo "##vso[task.setvariable variable=namespaceExists;isOutput=true]false"
              fi


- stage: DeployGrafanaMonitoring
  displayName: 'Deploy Grafana Monitoring Stack'
  dependsOn: CheckNamespace
  condition: and(succeeded(), eq(dependencies.CheckNamespace.outputs['CheckNamespace.checkNamespace.namespaceExists'], 'false'))
  jobs:
    - job: RunGrafanaMonitoring
      displayName: 'Deploy .grafana script to AKS'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureCLI@2
          displayName: 'Login to AKS Cluster'
          inputs:
            azureSubscription: $(AZURE_ACCOUNT)  # Cambia esto por tu nombre de servicio (Service Connection)
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing
          env:
            AZURE_DEVOPS_EXT_AZURE_RM_SERVICE_PRINCIPAL_CERTIFICATE: $(AZURE_DEVOPS_EXT_AZURE_RM_SERVICE_PRINCIPAL_CERTIFICATE)

        - task: DownloadSecureFile@1
          name: grafanaDeployScriptFile
          displayName: 'Download .grafana script'
          inputs:
            secureFile: 'grafana3'

        - script: |
            chmod +x $(grafanaDeployScriptFile.secureFilePath)
          displayName: 'Dar permisos de ejecución al script'

        - task: Bash@3
          displayName: 'Ejecutar script .grafana'
          inputs:
            filePath: $(grafanaDeployScriptFile.secureFilePath)


- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn: CheckNamespace
  condition: always()
  jobs:
  - deployment: DeployToAKS
    displayName: 'Deploy Microservices to AKS'
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: AzureCLI@2
            displayName: 'Get AKS credentials'
            inputs:
              azureSubscription: $(AZURE_ACCOUNT)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing
          - task: Kubernetes@1
            displayName: 'Create Namespace'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-$(tag)/namespace.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Delete Existing Zipkin Deployment'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'delete'
              arguments: '-f k8s-$(tag)/zipkin.yaml -n $(kubernetesNamespace) --ignore-not-found'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy Zipkin'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-$(tag)/zipkin.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Delete Existing Cloud Config Service Deployment'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'delete'
              arguments: '-f k8s-$(tag)/cloud-config.yaml -n $(kubernetesNamespace) --ignore-not-found'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy Cloud Config Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-$(tag)/cloud-config.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Delete Existing Service Discovery Deployment'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'delete'
              arguments: '-f k8s-$(tag)/service-discovery.yaml -n $(kubernetesNamespace) --ignore-not-found'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy Service Discovery'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-$(tag)/service-discovery.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Delete Existing API Gateway Deployment'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'delete'
              arguments: '-f k8s-$(tag)/api-gateway.yaml -n $(kubernetesNamespace) --ignore-not-found'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy API Gateway'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-$(tag)/api-gateway.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Delete Existing User Service Deployment'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'delete'
              arguments: '-f k8s-$(tag)/user-service.yaml -n $(kubernetesNamespace) --ignore-not-found'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy User Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-$(tag)/user-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Delete Existing Product Service Deployment'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'delete'
              arguments: '-f k8s-$(tag)/product-service.yaml -n $(kubernetesNamespace) --ignore-not-found'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy Product Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-$(tag)/product-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Delete Existing Order Service Deployment'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'delete'
              arguments: '-f k8s-$(tag)/order-service.yaml -n $(kubernetesNamespace) --ignore-not-found'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy Order Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-$(tag)/order-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Delete Existing Payment Service Deployment'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'delete'
              arguments: '-f k8s-$(tag)/payment-service.yaml -n $(kubernetesNamespace) --ignore-not-found'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy Payment Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-$(tag)/payment-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Delete Existing Favourite Service Deployment'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'delete'
              arguments: '-f k8s-$(tag)/favourite-service.yaml -n $(kubernetesNamespace) --ignore-not-found'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy Favourite Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-$(tag)/favourite-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Delete Existing Shipping Service Deployment'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'delete'
              arguments: '-f k8s-$(tag)/shipping-service.yaml -n $(kubernetesNamespace) --ignore-not-found'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy Shipping Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-$(tag)/shipping-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Delete Existing Proxy Client Deployment'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'delete'
              arguments: '-f k8s-$(tag)/proxy-client.yaml -n $(kubernetesNamespace) --ignore-not-found'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy Proxy Client'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-$(tag)/proxy-client.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Delete Existing Nginx Deployment'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'delete'
              arguments: '-f k8s-$(tag)/nginx.yaml -n $(kubernetesNamespace) --ignore-not-found'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy Nginx'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-$(tag)/nginx.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Verify Deployment Status'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'get'
              arguments: 'pods -n $(kubernetesNamespace)'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Get Services Status'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'get'
              arguments: 'services -n $(kubernetesNamespace)'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

- stage: SemanticRelease
  displayName: 'Semantic Release & Versioning'
  dependsOn: Deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: Release
    displayName: 'Generate Semantic Release'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      persistCredentials: true
      fetchDepth: 0
    
    - task: NodeTool@0
      displayName: 'Install Node.js 18.x'
      inputs:
        versionSpec: '18.x'
    
    - script: |
        echo "📦 Installing semantic-release dependencies..."
        npm ci
      displayName: 'Install Dependencies'
    
    - script: |
        echo "🔍 Running semantic-release dry-run..."
        npx semantic-release --dry-run
      displayName: 'Semantic Release Dry Run'
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)
    
    - script: |
        echo "🚀 Running semantic-release..."
        npx semantic-release
      displayName: 'Semantic Release'
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)
        GIT_AUTHOR_NAME: Azure DevOps
        GIT_AUTHOR_EMAIL: azuredevops@company.com
        GIT_COMMITTER_NAME: Azure DevOps
        GIT_COMMITTER_EMAIL: azuredevops@company.com
    
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Release Notes'
      inputs:
        targetPath: 'release-notes'
        artifact: 'release-notes'
      condition: always()
    
    - task: PublishPipelineArtifact@1
      displayName: 'Publish CHANGELOG'
      inputs:
        targetPath: 'CHANGELOG.md'
        artifact: 'changelog'
      condition: always()

- stage: NotifyFailure
  displayName: "Notificar Fallo en Teams"
  dependsOn:
    - Tests
    - SemanticRelease
    - ManualApproval
    - Deploy
    - DeployGrafanaMonitoring
  condition: failed()
  jobs:
    - job: NotifyJob
      steps:
        - task: PowerShell@2
          displayName: 'Enviar mensaje a Teams'
          inputs:
            targetType: 'inline'
            script: |
              Invoke-WebRequest -Uri "https://prod-56.westus.logic.azure.com:443/workflows/e6a26998771d4739b79204f1ddd54491/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=AMTXYf0tRkscjsz60bI226Tob4riU3XEfXa1ZLNjeiY" `
                -Method POST `
                -Headers @{ "Content-Type" = "application/json" } `
                -Body '{
                  "attachments": [{
                    "contentType": "application/vnd.microsoft.teams.card.adaptive",
                    "content": {
                      "type": "AdaptiveCard",
                      "version": "1.0",
                      "body": [
                        { "type": "TextBlock", "text": "🚨 *Pipeline Fallida*", "weight": "Bolder", "size": "Medium", "color": "Attention" },
                        { "type": "TextBlock", "text": "🔧 Proyecto: ecommerce-microservice-backend-app" },
                        { "type": "TextBlock", "text": "🧪 Estado: Fallido" },
                        { "type": "TextBlock", "text": "🌿 Rama: $(Build.DefinitionName)" },
                        { "type": "TextBlock", "text": "👤 Ejecutado por: $(Build.RequestedFor)" },
                        {
                          "type": "TextBlock",
                          "text": "[🔍 Ver logs](https://dev.azure.com/salazq/ecommerce-microservice-backend-app/_build/results?buildId=$(Build.BuildId))",
                          "wrap": true
                        }
                      ]
                    }
                  }]
                }'



