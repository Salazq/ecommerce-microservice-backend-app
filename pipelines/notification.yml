# Pipeline de prueba con fallo sint√©tico y notificaci√≥n a Logic App
trigger:
 none

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Tu Logic App webhook URL
  LOGIC_APP_WEBHOOK: 'https://prod-56.westus.logic.azure.com:443/workflows/e6a26998771d4739b79204f1ddd54491/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=AMTXYf0tRkscjsz60bI226Tob4riU3XEfXa1ZLNjeiY'

stages:
# Stage que siempre funciona
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Job'
    steps:
    - script: |
        echo "Starting build process..."
        echo "Compiling application..."
        sleep 2
        echo "Build completed successfully!"
      displayName: 'Build Application'

# Stage sint√©tico que SIEMPRE falla (para testing)
- stage: SyntheticFailure
  displayName: 'Test Stage (Always Fails)'
  dependsOn: Build
  jobs:
  - job: FailingJob
    displayName: 'Synthetic Failing Job'
    steps:
    - script: |
        echo "Running tests..."
        echo "This step will always fail for testing purposes"
        sleep 1
        echo "Simulating test failure..."
        exit 1
      displayName: 'Failing Test Step'
    
    - script: |
        echo "This step will never run because the previous one failed"
      displayName: 'Unreachable Step'

# Stage de notificaci√≥n que solo se ejecuta cuando algo falla
- stage: NotifyFailure
  displayName: 'Notify Failure'
  dependsOn: 
  - Build
  - SyntheticFailure
  condition: failed() # Solo se ejecuta si alg√∫n stage anterior fall√≥
  jobs:
  - job: SendNotification
    displayName: 'Send Failure Notification'
    steps:
    - task: PowerShell@2
      displayName: 'Send Logic App Notification'
      inputs:
        targetType: 'inline'
        script: |
          $uri = "$(LOGIC_APP_WEBHOOK)"
          
          # Preparar el payload para Logic App
          $body = @{
            title = "üö® Pipeline Failed"
            message = "Pipeline $(Build.DefinitionName) failed on branch $(Build.SourceBranchName)"
            details = @{
              buildId = "$(Build.BuildId)"
              buildNumber = "$(Build.BuildNumber)"
              branch = "$(Build.SourceBranchName)"
              repository = "$(Build.Repository.Name)"
              triggeredBy = "$(Build.RequestedFor)"
              failedAt = "$(System.DateTime)"
              project = "$(System.TeamProject)"
              buildUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
            }
            status = "failed"
            color = "ff0000"
          }
          
          $json = $body | ConvertTo-Json -Depth 5
          
          Write-Host "Sending notification to Logic App..."
          Write-Host "Payload: $json"
          
          try {
            $response = Invoke-RestMethod -Uri $uri -Method Post -Body $json -ContentType 'application/json'
            Write-Host "‚úÖ Notification sent successfully!"
            Write-Host "Response: $response"
          }
          catch {
            Write-Host "‚ùå Failed to send notification"
            Write-Host "Error: $($_.Exception.Message)"
            Write-Host "Status Code: $($_.Exception.Response.StatusCode.value__)"
            Write-Host "Response: $($_.Exception.Response)"
          }
