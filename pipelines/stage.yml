trigger: none

variables:
  - group: variable-group-taller
  - name: environmentPath
    value: 'terraform/environments/$(environment)'
  - name: aksResourceGroup
    value: 'dev-resource-group'
  - name: aksClusterName
    value: 'dev-aks-cluster'
  - name: kubernetesNamespace
    value: 'ecommerce'
  - name: nginxServiceName
    value: 'nginx-proxy'

stages:

# -----------------------------
# UNIT & INTEGRATION TESTS
# -----------------------------
- stage: Tests
  displayName: 'Run Tests and Coverage for All Services'
  jobs:
    - job: RunAllTests
      pool:
        vmImage: 'windows-latest'
      steps:
        - checkout: self        # Ejecuta todos los tests (unitarios, integración, etc.) y cobertura
        - task: Maven@4
          displayName: 'Run Tests and Generate Coverage'
          inputs:
            mavenPomFile: 'pom.xml'  # pom padre que llama a todos los módulos
            goals: 'clean verify'    # JaCoCo se ejecuta en fase verify
            options: '-Dmaven.test.failure.ignore=false -Dspring.profiles.active=test'
            publishJUnitTestResults: true
            testResultsFiles: '**/target/surefire-reports/TEST-*.xml,**/target/failsafe-reports/TEST-*.xml'
            javaHomeOption: 'JDKVersion' 
            jdkVersionOption: '1.11'
            mavenVersionOption: 'Default'
            mavenAuthenticateFeed: false
            effectivePomSkip: false        # Publica solo el reporte agregado de JaCoCo
        - task: PublishCodeCoverageResults@1
          displayName: 'Publish Aggregate Coverage Report'
          condition: succeeded()
          inputs:
            codeCoverageTool: 'JaCoCo'
            summaryFileLocation: 'jacoco-report-aggregation/target/site/jacoco-aggregate/jacoco.xml'
            reportDirectory: 'jacoco-report-aggregation/target/site/jacoco-aggregate'
            failIfCoverageEmpty: false

        # Publica solo el reporte HTML agregado como artefacto descargable
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Aggregate Coverage HTML Report'
          condition: succeeded()
          inputs:
            pathToPublish: 'jacoco-report-aggregation/target/site/jacoco-aggregate'
            artifactName: 'AggregateCoverageReport'
            publishLocation: 'Container'

# -----------------------------
# DEPLOY STAGE
# -----------------------------
- stage: Deploy
  displayName: 'Deploy to AKS'
  jobs:
  - deployment: DeployToAKS
    displayName: 'Deploy Microservices to AKS'
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: AzureCLI@2
            displayName: 'Get AKS credentials'
            inputs:
              azureSubscription: $(AZURE_ACCOUNT)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing
          - task: Kubernetes@1
            displayName: 'Create Namespace'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/namespace.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy Zipkin'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/zipkin.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy Cloud Config Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/cloud-config.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Service Discovery'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/service-discovery.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy API Gateway'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/api-gateway.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Kubernetes@1
            displayName: 'Deploy User Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/user-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Product Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/product-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Order Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/order-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Payment Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/payment-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Favourite Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/favourite-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Shipping Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/shipping-service.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Proxy Client'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/proxy-client.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Deploy Nginx'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              arguments: '-f k8s-aks/nginx.yaml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Verify Deployment Status'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'get'
              arguments: 'pods -n $(kubernetesNamespace)'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
          - task: Kubernetes@1
            displayName: 'Get Services Status'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(AZURE_ACCOUNT)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              command: 'get'
              arguments: 'services -n $(kubernetesNamespace)'
              workingDirectory: '$(System.DefaultWorkingDirectory)'


- stage: GetNginxIP
  displayName: 'Obtener IP pública de nginx-proxy'
  jobs:
    - job: CaptureNginxIP
      displayName: 'Capturar IP del servicio nginx'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureCLI@2
          displayName: 'Login to Azure y obtener credenciales del clúster'
          inputs:
            azureSubscription: '$(AZURE_ACCOUNT)'
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing

        - script: |
            echo "Esperando IP pública del servicio nginx..."
            for i in {1..10}; do
              IP=$(kubectl get svc $(nginxServiceName) -n $(kubernetesNamespace) -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
              if [[ -n "$IP" ]]; then
                echo "IP pública obtenida: $IP"
                echo "##vso[task.setvariable variable=NGINX_PUBLIC_IP;isOutput=true]$IP"
                break
              else
                echo "IP aún no disponible, reintentando en 10 segundos..."
                sleep 10
              fi
            done
          displayName: 'Capturar IP pública del nginx'
          name: CaptureIP


# -----------------------------
# E2E TESTING
# -----------------------------
- stage: E2ETests
  displayName: 'Run E2E Tests with Public IP'
  dependsOn: GetNginxIP
  condition: succeeded()
  variables:
    nginxPublicIP: $[ stageDependencies.GetNginxIP.CaptureNginxIP.outputs['CaptureIP.NGINX_PUBLIC_IP'] ]
  jobs:
    - job: E2E
      displayName: 'E2E Tests'
      pool:
        vmImage: 'windows-latest'
      steps:
        - checkout: self

        # Instalar Node.js
        - task: NodeTool@0
          displayName: 'Install Node.js'
          inputs:
            versionSpec: '18.x'

        # Instalar Newman
        - task: PowerShell@2
          displayName: 'Install Newman'
          inputs:
            targetType: 'inline'
            script: |
              Write-Host "📦 Installing Newman..."
              npm install -g newman
              Write-Host "✅ Newman installed successfully"
              newman --version        # Ejecutar pruebas E2E
        - task: PowerShell@2
          displayName: 'Run Postman E2E Tests'
          inputs:
            targetType: 'inline'
            script: |
              Write-Host "🌐 Using Public IP: $(nginxPublicIP)"
              $baseUrl = "http://$(nginxPublicIP)"
              Write-Host "🔗 Base URL: $baseUrl"
              powershell -ExecutionPolicy Bypass -File run-all-tests.ps1 -BaseUrl $baseUrl

        # Publicar resultados de pruebas
        - task: PublishBuildArtifacts@1
          inputs:
            pathToPublish: 'newman-results'
            artifactName: 'e2e-test-results'

# -----------------------------
# LOAD TESTING
# -----------------------------
- stage: LoadTests
  displayName: 'Run Load Tests with Locust'
  dependsOn: GetNginxIP
  condition: succeeded()
  variables:
    nginxPublicIP: $[ stageDependencies.GetNginxIP.CaptureNginxIP.outputs['CaptureIP.NGINX_PUBLIC_IP'] ]
  jobs:
    - job: Load
      displayName: 'Load Testing with Locust'
      pool:
        vmImage: 'windows-latest'
      steps:
        - checkout: self

        # Instalar Python
        - task: UsePythonVersion@0
          displayName: 'Install Python'
          inputs:
            versionSpec: '3.9'
            addToPath: true

        # Instalar dependencias de Locust
        - task: PowerShell@2
          displayName: 'Install Locust Dependencies'
          inputs:
            targetType: 'inline'
            script: |
              Write-Host "📦 Installing Locust and dependencies..."
              python -m pip install --upgrade pip
              pip install -r load-testing/requirements.txt
              Write-Host "✅ Locust dependencies installed successfully"
              python -m locust --version

        # Ejecutar pruebas de carga
        - task: PowerShell@2
          displayName: 'Run Locust Load Tests'
          inputs:
            targetType: 'inline'
            script: |
              Write-Host "🌐 Using Public IP: $(nginxPublicIP)"
              $env:PUBLIC_IP = "$(nginxPublicIP)"
              powershell -ExecutionPolicy Bypass -File load-testing\run-locust.ps1

        # Publicar resultados
        - task: PublishBuildArtifacts@1
          inputs:
            pathToPublish: 'load-testing/resultados-carga'
            artifactName: 'locust-load-results'