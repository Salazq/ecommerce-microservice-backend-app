# Pipeline de Azure DevOps para Análisis de Seguridad con Trivy
# Escanea el repositorio y las imágenes Docker de los microservicios con Trivy

trigger:
- develop
- stage
- master

variables:
  - group: variable-group-taller
  - name: vmImageName
    value: 'ubuntu-latest'
  - name: dockerHubUsername
    value: 'your-dockerhub-username'  # Cambiar por tu usuario de Docker Hub

stages:
- stage: SecurityScan
  displayName: 'Security Scan with Trivy'
  jobs:
  - job: TrivyScans
    displayName: 'Trivy Security Scans'
    pool:
      vmImage: $(vmImageName)    
    steps:
    # Paso 1: Checkout del código
    - checkout: self
      displayName: 'Checkout Repository'    # Paso 2: Escaneo del repositorio como filesystem
    - task: trivy@2
      name: TrivyFilesystem
      displayName: 'Scan current repository as filesystem'
      continueOnError: true
      inputs:
        version: 'latest'
        type: 'filesystem'
        target: '.'
        scanners: 'misconfig,vuln,secret'
        ignoreUnfixed: true
        ignoreScanErrors: true
        reports: 'github, html'
        publish: true    # Paso 3: Escaneo de imágenes Docker desde Docker Hub
    - task: trivy@2
      name: TrivyServiceDiscovery
      displayName: 'Scan service-discovery image'
      continueOnError: true
      inputs:
        version: 'latest'
        type: 'image'
        target: '$(dockerHubUsername)/service-discovery:latest'
        scanners: 'vuln,misconfig'
        ignoreUnfixed: true
        ignoreScanErrors: true
        reports: 'github, sarif'
        publish: true

    - task: trivy@2
      name: TrivyCloudConfig
      displayName: 'Scan cloud-config image'
      continueOnError: true
      inputs:
        version: 'latest'
        type: 'image'
        target: '$(dockerHubUsername)/cloud-config:latest'
        scanners: 'vuln,misconfig'
        ignoreUnfixed: true
        ignoreScanErrors: true
        reports: 'github, sarif'
        publish: true

    - task: trivy@2
      name: TrivyApiGateway
      displayName: 'Scan api-gateway image'
      continueOnError: true
      inputs:
        version: 'latest'
        type: 'image'
        target: '$(dockerHubUsername)/api-gateway:latest'
        scanners: 'vuln,misconfig'
        ignoreUnfixed: true
        ignoreScanErrors: true
        reports: 'github, sarif'
        publish: true

    - task: trivy@2
      name: TrivyProxyClient
      displayName: 'Scan proxy-client image'
      continueOnError: true
      inputs:
        version: 'latest'
        type: 'image'
        target: '$(dockerHubUsername)/proxy-client:latest'
        scanners: 'vuln,misconfig'
        ignoreUnfixed: true
        ignoreScanErrors: true
        reports: 'github, sarif'
        publish: true

    - task: trivy@2
      name: TrivyUserService
      displayName: 'Scan user-service image'
      continueOnError: true
      inputs:
        version: 'latest'
        type: 'image'
        target: '$(dockerHubUsername)/user-service:latest'
        scanners: 'vuln,misconfig'
        ignoreUnfixed: true
        ignoreScanErrors: true
        reports: 'github, sarif'
        publish: true

    - task: trivy@2
      name: TrivyProductService
      displayName: 'Scan product-service image'
      continueOnError: true
      inputs:
        version: 'latest'
        type: 'image'
        target: '$(dockerHubUsername)/product-service:latest'
        scanners: 'vuln,misconfig'
        ignoreUnfixed: true
        ignoreScanErrors: true
        reports: 'github, sarif'
        publish: true

    - task: trivy@2
      name: TrivyOrderService
      displayName: 'Scan order-service image'
      continueOnError: true
      inputs:
        version: 'latest'
        type: 'image'
        target: '$(dockerHubUsername)/order-service:latest'
        scanners: 'vuln,misconfig'
        ignoreUnfixed: true
        ignoreScanErrors: true
        reports: 'github, sarif'
        publish: true

    - task: trivy@2
      name: TrivyPaymentService
      displayName: 'Scan payment-service image'
      continueOnError: true
      inputs:
        version: 'latest'
        type: 'image'
        target: '$(dockerHubUsername)/payment-service:latest'
        scanners: 'vuln,misconfig'
        ignoreUnfixed: true
        ignoreScanErrors: true
        reports: 'github, sarif'
        publish: true

    - task: trivy@2
      name: TrivyShippingService
      displayName: 'Scan shipping-service image'
      continueOnError: true
      inputs:
        version: 'latest'
        type: 'image'
        target: '$(dockerHubUsername)/shipping-service:latest'
        scanners: 'vuln,misconfig'
        ignoreUnfixed: true
        ignoreScanErrors: true
        reports: 'github, sarif'
        publish: true

    - task: trivy@2
      name: TrivyFavouriteService
      displayName: 'Scan favourite-service image'
      continueOnError: true
      inputs:
        version: 'latest'
        type: 'image'
        target: '$(dockerHubUsername)/favourite-service:latest'
        scanners: 'vuln,misconfig'
        ignoreUnfixed: true
        ignoreScanErrors: true
        reports: 'github, sarif'
        publish: true

    - task: trivy@2
      name: TrivyNginx
      displayName: 'Scan nginx image'
      continueOnError: true
      inputs:
        version: 'latest'
        type: 'image'
        target: '$(dockerHubUsername)/nginx:latest'
        scanners: 'vuln,misconfig'
        ignoreUnfixed: true
        ignoreScanErrors: true
        reports: 'github, sarif'
        publish: true    # Paso 4: Los reportes se publican automáticamente como artefactos
    # Los resultados están disponibles en GitHub Security y como archivos SARIF/HTML